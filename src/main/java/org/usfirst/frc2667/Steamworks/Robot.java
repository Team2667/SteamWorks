// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2667.Steamworks;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import org.usfirst.frc2667.Steamworks.commands.AutonomousCommand;
import org.usfirst.frc2667.Steamworks.commands.Drive;
import org.usfirst.frc2667.Steamworks.commands.DriveCAN;
import org.usfirst.frc2667.Steamworks.subsystems.DriveTrain;
import org.usfirst.frc2667.Steamworks.subsystems.Lift;
import org.usfirst.frc2667.Steamworks.subsystems.Shooter;
import org.usfirst.frc2667.Steamworks.vision.GripPipeline;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.VideoSource;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.VisionThread;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Shooter shooter;
    public static Lift lift;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private NetworkTable table;
    private VisionThread visionThread;

    SendableChooser driveTrainChooser;

    public Robot() {
    	table = NetworkTable.getTable("GRIP/myCountoursReport");
    }
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        shooter = new Shooter();
        lift = new Lift();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        CameraServer cameraServer = CameraServer.getInstance();
        System.out.println("Camera sources:" + VideoSource.enumerateSources().length);
        for (VideoSource videoSource : VideoSource.enumerateSources()) {
        	System.out.println("Camera: " + videoSource.getName());
        }
        
        UsbCamera  camera= cameraServer.startAutomaticCapture();
        System.out.println("Started camera capture.");
     // Hard coded camera address
        cameraServer.addAxisCamera("AxisCam ye", "10.26.67.42");
      //  visionThread = new VisionThread(camera,new GripPipeline());

        driveTrainChooser = new SendableChooser();
        driveTrainChooser.addDefault("default PWM", DriveTrain.DriveMode.PWM);
        for (DriveTrain.DriveMode driveMode : DriveTrain.DriveMode.values()) {
            driveTrainChooser.addObject(driveMode.name(), driveMode);
        }
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        System.out.println("calibrating gyro...");
        RobotMap.gyro.calibrate();
        System.out.println("finished gyro calibration!");
        RobotMap.gyro.reset();

        driveTrain.setRobotDrive((DriveTrain.DriveMode) driveTrainChooser.getSelected());
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("GyroAngle", RobotMap.gyro.getAngle());
        SmartDashboard.putNumber("JoystickX", Robot.oi.getLogitech().getX());
        SmartDashboard.putNumber("JoystickY", Robot.oi.getLogitech().getY());
        SmartDashboard.putNumber("JoystickTwist", Robot.oi.getLogitech().getTwist());
    }
    

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
